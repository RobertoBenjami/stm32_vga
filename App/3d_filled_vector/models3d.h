// ------------------------------------------------ 
/*
 *        ^Y 
 *        |     / Z
 *        |    /
 *    7------6
 *   /|     /|
 *  3------2 | 
 *  | |    | |    ----> X
 *  | 4----|-5
 *  |/     |/
 *  0------1
 *
 */

const int16_t numVertsCubeQ = 8;
const int16_t vertsCubeQ[] =
{
  -100, -100, -100,  // 0
   100, -100, -100,  // 1
   100,  100, -100,  // 2
  -100,  100, -100,  // 3
  -100, -100,  100,  // 4
   100, -100,  100,  // 5
   100,  100,  100,  // 6
  -100,  100,  100,  // 7
};

const int16_t numQuadsCubeQ = 6;
const uint8_t quadsCubeQ[] =
{
  0, 1, 2, 3,  // front
  7, 6, 5, 4,  // back
  4, 5, 1, 0,  // bottom
  3, 2, 6, 7,  // top
  7, 4, 0, 3,  // left
  2, 1, 5, 6,  // right
};

const uint16_t colsCubeQ[] =
{
  COL23,COL23,COL21,COL21,COL22,COL22,
  //RED, GREEN, BLUE, YELLOW, MAGENTA, CYAN
};

// ----------------------------------------------- 
/*
            ^Y
            |
            |
         8----9
         |    |
    4----3----2----6
    |    |    |    |   --->X
    5----0----1----7
         |    |
         10--11
*/

const int16_t numVertsCross = 12*2;
const int16_t vertsCross[] =
{
  -50, -50, -50,  // 0
   50, -50, -50,  // 1
   50,  50, -50,  // 2
  -50,  50, -50,  // 3
  -150,   50, -50,  // 4
  -150,  -50, -50,  // 5
   150,   50, -50,  // 6
   150,  -50, -50,  // 7
   -50,  150, -50,  // 8
    50,  150, -50,  // 9
   -50, -150, -50,  // 10
    50, -150, -50,  // 11

  -50, -50, 50,  // 0
   50, -50, 50,  // 1
   50,  50, 50,  // 2
  -50,  50, 50,  // 3
  -150,   50, 50,  // 4
  -150,  -50, 50,  // 5
   150,   50, 50,  // 6
   150,  -50, 50,  // 7
   -50,  150, 50,  // 8
    50,  150, 50,  // 9
   -50, -150, 50,  // 10
    50, -150, 50,  // 11

};

const int16_t numQuadsCross = 5+5+3*4;
const uint8_t quadsCross[] =
{
  0, 1, 2, 3,  // front mid
  7, 6, 2, 1,  // front right
  4, 5, 0, 3,  // front left
  3, 2, 9, 8,  // front top
  10,11,1, 0,  // front bottom

  12+3, 12+2, 12+1, 12+0,  // rear mid
  12+1, 12+2, 12+6, 12+7,  // rear right
  12+3, 12+0, 12+5, 12+4,  // rear left
  12+8, 12+9, 12+2, 12+3,  // rear top
  12+0, 12+1,12+11,12+10,  // rear bottom

  0+12,10+12,10,0,
  10+12,11+12,11,10,
  11+12,1+12,1,11,

  1+12,7+12,7,1,
  7+12,6+12,6,7,
  6+12,2+12,2,6,

  2+12,9+12,9,2,
  9+12,8+12,8,9,
  8+12,3+12,3,8,

  3+12,4+12,4,3,
  4+12,5+12,5,4,
  5+12,0+12,0,5,

};

const uint16_t colsCross[] =
{
  COL31,COL51,COL51,COL51,COL51,
  COL31,COL51,COL51,COL51,COL51,
  COL52,COL53,COL52,COL53,COL52,COL53,
  COL52,COL53,COL52,COL53,COL52,COL53,
};

// ----------------------------------------------- 

const int16_t numVerts3 = 8*4;
const int16_t verts3[] =
{
  -100, -100, -200,  // 0 front
   100, -100, -200,  // 1
   100,  100, -200,  // 2
  -100,  100, -200,  // 3
   -50,  -50,  -50,  // 4
    50,  -50,  -50,  // 5
    50,   50,  -50,  // 6
   -50,   50,  -50,  // 7

   -50,  -50,   50,  // 0 rear
    50,  -50,   50,  // 1
    50,   50,   50,  // 2
   -50,   50,   50,  // 3
  -100, -100,  200,  // 4
   100, -100,  200,  // 5
   100,  100,  200,  // 6
  -100,  100,  200,  // 7

  -200, -100, -100,  // 0 left
   -50,  -50, -50,   // 1
   -50,   50, -50,   // 2
  -200,  100, -100,  // 3
  -200, -100,  100,  // 4
   -50,  -50,  50,   // 5
   -50,   50,  50,   // 6
  -200,  100,  100,  // 7

    50,  -50,  -50,  // 0 right
   200, -100, -100,  // 1
   200,  100, -100,  // 2
    50,   50,  -50,  // 3
    50,  -50,   50,  // 4
   200, -100,  100,  // 5
   200,  100,  100,  // 6
    50,   50,   50,  // 7
};

const int16_t numQuads3 = 6*4;
const uint8_t quads3[] =
{
  0, 1, 2, 3,  // front
  7, 6, 5, 4,  // back
  4, 5, 1, 0,  // bottom
  3, 2, 6, 7,  // top
  7, 4, 0, 3,  // left
  2, 1, 5, 6,  // right

  8+0, 8+1, 8+2, 8+3,  // front
  8+7, 8+6, 8+5, 8+4,  // back
  8+4, 8+5, 8+1, 8+0,  // bottom
  8+3, 8+2, 8+6, 8+7,  // top
  8+7, 8+4, 8+0, 8+3,  // left
  8+2, 8+1, 8+5, 8+6,  // right

  16+0, 16+1, 16+2, 16+3,  // front
  16+7, 16+6, 16+5, 16+4,  // back
  16+4, 16+5, 16+1, 16+0,  // bottom
  16+3, 16+2, 16+6, 16+7,  // top
  16+7, 16+4, 16+0, 16+3,  // left
  16+2, 16+1, 16+5, 16+6,  // right

  24+0, 24+1, 24+2, 24+3,  // front
  24+7, 24+6, 24+5, 24+4,  // back
  24+4, 24+5, 24+1, 24+0,  // bottom
  24+3, 24+2, 24+6, 24+7,  // top
  24+7, 24+4, 24+0, 24+3,  // left
  24+2, 24+1, 24+5, 24+6,  // right
};

const uint16_t cols3[] =
{
  COL13,COL13,COL11,COL11,COL12,COL12,
  COL23,COL23,COL21,COL21,COL22,COL22,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL43,COL43,COL41,COL41,COL42,COL42,
};

// ----------------------------------------------- 

const int16_t numVertsCubes = 8*9;
const int16_t vertsCubes[] =
{
  -50, -50, -50,  // 0
   50, -50, -50,  // 1
   50,  50, -50,  // 2
  -50,  50, -50,  // 3
  -50, -50,  50,  // 4
   50, -50,  50,  // 5
   50,  50,  50,  // 6
  -50,  50,  50,  // 7

  100-50, 100-50, -50+100,  // 0
  100+50, 100-50, -50+100,  // 1
  100+50, 100+50, -50+100,  // 2
  100-50, 100+50, -50+100,  // 3
  100-50, 100-50,  50+100,  // 4
  100+50, 100-50,  50+100,  // 5
  100+50, 100+50,  50+100,  // 6
  100-50, 100+50,  50+100,  // 7

  -100-50, 100-50, -50+100,  // 0
  -100+50, 100-50, -50+100,  // 1
  -100+50, 100+50, -50+100,  // 2
  -100-50, 100+50, -50+100,  // 3
  -100-50, 100-50,  50+100,  // 4
  -100+50, 100-50,  50+100,  // 5
  -100+50, 100+50,  50+100,  // 6
  -100-50, 100+50,  50+100,  // 7

  -100-50, -100-50, -50+100,  // 0
  -100+50, -100-50, -50+100,  // 1
  -100+50, -100+50, -50+100,  // 2
  -100-50, -100+50, -50+100,  // 3
  -100-50, -100-50,  50+100,  // 4
  -100+50, -100-50,  50+100,  // 5
  -100+50, -100+50,  50+100,  // 6
  -100-50, -100+50,  50+100,  // 7

  100-50, -100-50, -50+100,  // 0
  100+50, -100-50, -50+100,  // 1
  100+50, -100+50, -50+100,  // 2
  100-50, -100+50, -50+100,  // 3
  100-50, -100-50,  50+100,  // 4
  100+50, -100-50,  50+100,  // 5
  100+50, -100+50,  50+100,  // 6
  100-50, -100+50,  50+100,  // 7

  100-50, 100-50, -50-100,  // 0
  100+50, 100-50, -50-100,  // 1
  100+50, 100+50, -50-100,  // 2
  100-50, 100+50, -50-100,  // 3
  100-50, 100-50,  50-100,  // 4
  100+50, 100-50,  50-100,  // 5
  100+50, 100+50,  50-100,  // 6
  100-50, 100+50,  50-100,  // 7

  -100-50, 100-50, -50-100,  // 0
  -100+50, 100-50, -50-100,  // 1
  -100+50, 100+50, -50-100,  // 2
  -100-50, 100+50, -50-100,  // 3
  -100-50, 100-50,  50-100,  // 4
  -100+50, 100-50,  50-100,  // 5
  -100+50, 100+50,  50-100,  // 6
  -100-50, 100+50,  50-100,  // 7

  -100-50, -100-50, -50-100,  // 0
  -100+50, -100-50, -50-100,  // 1
  -100+50, -100+50, -50-100,  // 2
  -100-50, -100+50, -50-100,  // 3
  -100-50, -100-50,  50-100,  // 4
  -100+50, -100-50,  50-100,  // 5
  -100+50, -100+50,  50-100,  // 6
  -100-50, -100+50,  50-100,  // 7

  100-50, -100-50, -50-100,  // 0
  100+50, -100-50, -50-100,  // 1
  100+50, -100+50, -50-100,  // 2
  100-50, -100+50, -50-100,  // 3
  100-50, -100-50,  50-100,  // 4
  100+50, -100-50,  50-100,  // 5
  100+50, -100+50,  50-100,  // 6
  100-50, -100+50,  50-100,  // 7
};

const int16_t numQuadsCubes = 6*9;
const uint8_t quadsCubes[] =
{
  0, 1, 2, 3,  // front
  7, 6, 5, 4,  // back
  4, 5, 1, 0,  // bottom
  3, 2, 6, 7,  // top
  7, 4, 0, 3,  // left
  2, 1, 5, 6,  // right

  8+0, 8+1, 8+2, 8+3,  // front
  8+7, 8+6, 8+5, 8+4,  // back
  8+4, 8+5, 8+1, 8+0,  // bottom
  8+3, 8+2, 8+6, 8+7,  // top
  8+7, 8+4, 8+0, 8+3,  // left
  8+2, 8+1, 8+5, 8+6,  // right

  16+0, 16+1, 16+2, 16+3,  // front
  16+7, 16+6, 16+5, 16+4,  // back
  16+4, 16+5, 16+1, 16+0,  // bottom
  16+3, 16+2, 16+6, 16+7,  // top
  16+7, 16+4, 16+0, 16+3,  // left
  16+2, 16+1, 16+5, 16+6,  // right

  24+0, 24+1, 24+2, 24+3,  // front
  24+7, 24+6, 24+5, 24+4,  // back
  24+4, 24+5, 24+1, 24+0,  // bottom
  24+3, 24+2, 24+6, 24+7,  // top
  24+7, 24+4, 24+0, 24+3,  // left
  24+2, 24+1, 24+5, 24+6,  // right

  32+0, 32+1, 32+2, 32+3,  // front
  32+7, 32+6, 32+5, 32+4,  // back
  32+4, 32+5, 32+1, 32+0,  // bottom
  32+3, 32+2, 32+6, 32+7,  // top
  32+7, 32+4, 32+0, 32+3,  // left
  32+2, 32+1, 32+5, 32+6,  // right

  40+0, 40+1, 40+2, 40+3,  // front
  40+7, 40+6, 40+5, 40+4,  // back
  40+4, 40+5, 40+1, 40+0,  // bottom
  40+3, 40+2, 40+6, 40+7,  // top
  40+7, 40+4, 40+0, 40+3,  // left
  40+2, 40+1, 40+5, 40+6,  // right

  48+0, 48+1, 48+2, 48+3,  // front
  48+7, 48+6, 48+5, 48+4,  // back
  48+4, 48+5, 48+1, 48+0,  // bottom
  48+3, 48+2, 48+6, 48+7,  // top
  48+7, 48+4, 48+0, 48+3,  // left
  48+2, 48+1, 48+5, 48+6,  // right

  56+0, 56+1, 56+2, 56+3,  // front
  56+7, 56+6, 56+5, 56+4,  // back
  56+4, 56+5, 56+1, 56+0,  // bottom
  56+3, 56+2, 56+6, 56+7,  // top
  56+7, 56+4, 56+0, 56+3,  // left
  56+2, 56+1, 56+5, 56+6,  // right

  64+0, 64+1, 64+2, 64+3,  // front
  64+7, 64+6, 64+5, 64+4,  // back
  64+4, 64+5, 64+1, 64+0,  // bottom
  64+3, 64+2, 64+6, 64+7,  // top
  64+7, 64+4, 64+0, 64+3,  // left
  64+2, 64+1, 64+5, 64+6,  // right
};

const uint16_t colsCubes[] =
{
  COL13,COL13,COL11,COL11,COL12,COL12,
  COL23,COL23,COL21,COL21,COL22,COL22,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL43,COL43,COL41,COL41,COL42,COL42,
  COL53,COL53,COL51,COL51,COL52,COL52,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL43,COL43,COL41,COL41,COL42,COL42,
  COL53,COL53,COL51,COL51,COL52,COL52,
  COL23,COL23,COL21,COL21,COL22,COL22,
};

// ----------------------------------------------- 
#define SCL 8
#define numVertsCone 15
const int16_t vertsCone[numVertsCone * 3] =
{
  (-14.073*SCL), (11.22285*SCL), (-18.0*SCL),
  (0.0*SCL), (0.0*SCL), (18.0*SCL),
  (-7.8099*SCL), (16.2174*SCL), (-18.0*SCL),
  (0.0*SCL), (18.0*SCL), (-18.0*SCL),
  (7.8099*SCL), (16.2174*SCL), (-18.0*SCL),
  (-17.54865*SCL), (4.00545*SCL), (-18.0*SCL),
  (-17.54865*SCL), (-4.00545*SCL), (-18.0*SCL),
  (-14.073*SCL), (-11.22285*SCL), (-18.0*SCL),
  (-7.8099*SCL), (-16.2174*SCL), (-18.0*SCL),
  (0.0*SCL), (-18.0*SCL), (-18.0*SCL),
  (7.8099*SCL), (-16.2174*SCL), (-18.0*SCL),
  (14.073*SCL), (-11.22285*SCL), (-18.0*SCL),
  (17.54865*SCL), (-4.00545*SCL), (-18.0*SCL),
  (17.54865*SCL), (4.0053*SCL), (-18.0*SCL),
  (14.073*SCL), (11.22285*SCL), (-18.0*SCL),
};

#define numTrisCone 26
const uint8_t trisCone[numTrisCone * 3] =
{
  0, 1, 2,
  3, 1, 4,
  5, 1, 0,
  6, 1, 5,
  7, 1, 6,
  8, 1, 7,
  9, 1, 8,
  10, 1, 9,
  11, 1, 10,
  12, 1, 11,
  13, 1, 12,
  14, 1, 13,
  2, 1, 3,
  4, 1, 14,
  3, 0, 2,
  6, 5, 0,
  8, 7, 6,
  10, 9, 8,
  12, 11, 10,
  14, 13, 12,
  3, 4, 14,
  3, 6, 0,
  10, 8, 6,
  14, 12, 10,
  3, 14, 6,
  14, 10, 6,
}; 

const uint16_t colsCone[] =
{
  COL13,COL13,COL11,COL13,COL11,COL13,COL11,
  COL13,COL11,COL13,COL11,COL13,COL11,COL11,
  COL12,COL12,COL12,COL12,COL12,COL12,
  COL12,COL12,COL12,COL12,COL12,COL12,
};
// ----------------------------------------------- 

#define numVertsCube  8
const int16_t vertsCube[numVertsCube*3] =
{
  (14.0*SCL), (14.0*SCL), (-14.0*SCL),
  (14.0*SCL), (-14.0*SCL), (-14.0*SCL),
  (-14.0*SCL), (-14.0*SCL), (-14.0*SCL),
  (-14.0*SCL), (14.0*SCL), (-14.0*SCL),
  (14.0*SCL), (14.0*SCL), (14.0*SCL),
  (-14.0*SCL), (14.0*SCL), (14.0*SCL),
  (-14.0*SCL), (-14.0*SCL), (14.0*SCL),
  (14.0*SCL), (-14.0*SCL), (14.0*SCL),
};

#define numTrisCube  12
const uint8_t trisCube[numTrisCone*3] =
{
  0, 1, 2,
  2, 3, 0,
  4, 5, 6,
  6, 7, 4,
  0, 4, 7,
  7, 1, 0,
  1, 7, 6,
  6, 2, 1,
  2, 6, 5,
  5, 3, 2,
  4, 0, 3,
  3, 5, 4,
}; 

const uint16_t colsCube[] =
{
  COL23,COL23,COL23,COL23,
  COL21,COL21,COL31,COL31,
  COL22,COL22,COL32,COL32,
// RED,DRED, GREEN,DGREEN, BLUE,DBLUE, YELLOW,DYELLOW, MAGENTA,DMAGENTA, CYAN,DCYAN,
};
// ----------------------------------------------- 
const int16_t numVertsTorus = 36;
const int16_t vertsTorus[] =
{
  (32.16*SCL), (0.0*SCL), (0.0*SCL),
  (16.08*SCL), (27.8514*SCL), (0.0*SCL),
  (14.04*SCL), (24.318*SCL), (7.0668*SCL),
  (28.08*SCL), (0.0*SCL), (7.0668*SCL),
  (9.96*SCL), (17.2512*SCL), (7.0668*SCL),
  (19.92*SCL), (0.0*SCL), (7.0668*SCL),
  (7.92*SCL), (13.7178*SCL), (0.0*SCL),
  (15.84*SCL), (0.0*SCL), (0.0*SCL),
  (9.96*SCL), (17.2512*SCL), (-7.0668*SCL),
  (19.92*SCL), (0.0*SCL), (-7.0668*SCL),
  (14.04*SCL), (24.318*SCL), (-7.0668*SCL),
  (28.08*SCL), (0.0*SCL), (-7.0668*SCL),
  (-16.08*SCL), (27.8514*SCL), (0.0*SCL),
  (-14.04*SCL), (24.318*SCL), (7.0668*SCL),
  (-9.96*SCL), (17.2512*SCL), (7.0668*SCL),
  (-7.92*SCL), (13.7178*SCL), (0.0*SCL),
  (-9.96*SCL), (17.2512*SCL), (-7.0668*SCL),
  (-14.04*SCL), (24.318*SCL), (-7.0668*SCL),
  (-32.16*SCL), (0.0*SCL), (0.0*SCL),
  (-28.08*SCL), (0.0*SCL), (7.0668*SCL),
  (-19.92*SCL), (0.0*SCL), (7.0668*SCL),
  (-15.84*SCL), (0.0*SCL), (0.0*SCL),
  (-19.92*SCL), (0.0*SCL), (-7.0668*SCL),
  (-28.08*SCL), (0.0*SCL), (-7.0668*SCL),
  (-16.08*SCL), (-27.8514*SCL), (0.0*SCL),
  (-14.04*SCL), (-24.318*SCL), (7.0668*SCL),
  (-9.96*SCL), (-17.2512*SCL), (7.0668*SCL),
  (-7.92*SCL), (-13.7178*SCL), (0.0*SCL),
  (-9.96*SCL), (-17.2512*SCL), (-7.0668*SCL),
  (-14.04*SCL), (-24.318*SCL), (-7.0668*SCL),
  (16.08*SCL), (-27.8514*SCL), (0.0*SCL),
  (14.04*SCL), (-24.318*SCL), (7.0668*SCL),
  (9.96*SCL), (-17.2512*SCL), (7.0668*SCL),
  (7.92*SCL), (-13.7178*SCL), (0.0*SCL),
  (9.96*SCL), (-17.2512*SCL), (-7.0668*SCL),
  (14.04*SCL), (-24.318*SCL), (-7.0668*SCL),
};

const int16_t numTrisTorus = 72;
const uint8_t trisTorus[] =
{
  0, 1, 2,
  2, 3, 0,
  3, 2, 4,
  4, 5, 3,
  5, 4, 6,
  6, 7, 5,
  7, 6, 8,
  8, 9, 7,
  9, 8, 10,
  10, 11, 9,
  0, 11, 10,
  10, 1, 0,
  1, 12, 13,
  13, 2, 1,
  2, 13, 14,
  14, 4, 2,
  4, 14, 15,
  15, 6, 4,
  6, 15, 16,
  16, 8, 6,
  8, 16, 17,
  17, 10, 8,
  10, 17, 12,
  12, 1, 10,
  12, 18, 19,
  19, 13, 12,
  13, 19, 20,
  20, 14, 13,
  14, 20, 21,
  21, 15, 14,
  15, 21, 22,
  22, 16, 15,
  16, 22, 23,
  23, 17, 16,
  17, 23, 18,
  18, 12, 17,
  18, 24, 25,
  25, 19, 18,
  19, 25, 26,
  26, 20, 19,
  20, 26, 27,
  27, 21, 20,
  21, 27, 28,
  28, 22, 21,
  22, 28, 29,
  29, 23, 22,
  23, 29, 24,
  24, 18, 23,
  24, 30, 31,
  31, 25, 24,
  25, 31, 32,
  32, 26, 25,
  26, 32, 33,
  33, 27, 26,
  27, 33, 34,
  34, 28, 27,
  28, 34, 35,
  35, 29, 28,
  29, 35, 30,
  30, 24, 29,
  30, 0, 3,
  3, 31, 30,
  31, 3, 5,
  5, 32, 31,
  32, 5, 7,
  7, 33, 32,
  33, 7, 9,
  9, 34, 33,
  34, 9, 11,
  11, 35, 34,
  0, 30, 35,
  35, 11, 0,
}; 

const uint16_t colsTorus[] =
{
  COL13,COL13,COL11,COL11,COL12,COL12,
  COL23,COL23,COL21,COL21,COL22,COL22,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL43,COL43,COL41,COL41,COL42,COL42,
  COL53,COL53,COL51,COL51,COL52,COL52,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL43,COL43,COL41,COL41,COL42,COL42,
  COL53,COL53,COL51,COL51,COL52,COL52,
  COL23,COL23,COL21,COL21,COL22,COL22,
  COL53,COL53,COL51,COL51,COL52,COL52,
  COL53,COL53,COL51,COL51,COL52,COL52,
  COL23,COL23,COL21,COL21,COL22,COL22,
};

// ----------------------------------------------- 
const int16_t numVertsMonkey = 122;
const int16_t vertsMonkey[] =
{
  (4.876*SCL), (-12.0*SCL), (-4.124*SCL),
  (19.876*SCL), (-10.688*SCL), (3.562*SCL),
  (9.0*SCL), (-16.876*SCL), (0.376*SCL),
  (2.626*SCL), (-18.75*SCL), (-3.188*SCL),
  (-9.0*SCL), (-16.876*SCL), (0.376*SCL),
  (-19.876*SCL), (-10.688*SCL), (3.562*SCL),
  (-5.25*SCL), (-10.312*SCL), (-6.75*SCL),
  (-2.626*SCL), (-18.75*SCL), (-3.188*SCL),
  (11.062*SCL), (-16.876*SCL), (2.812*SCL),
  (-11.062*SCL), (-16.876*SCL), (2.812*SCL),
  (20.626*SCL), (-14.25*SCL), (10.312*SCL),
  (7.688*SCL), (-17.626*SCL), (18.188*SCL),
  (4.876*SCL), (-20.438*SCL), (14.812*SCL),
  (16.5*SCL), (-17.438*SCL), (9.938*SCL),
  (-4.876*SCL), (-20.438*SCL), (14.812*SCL),
  (-7.688*SCL), (-17.626*SCL), (18.188*SCL),
  (-20.626*SCL), (-14.25*SCL), (10.312*SCL),
  (-16.5*SCL), (-17.438*SCL), (9.938*SCL),
  (3.75*SCL), (-18.188*SCL), (17.25*SCL),
  (-3.75*SCL), (-18.188*SCL), (17.25*SCL),
  (0.0*SCL), (-19.688*SCL), (8.438*SCL),
  (0.0*SCL), (-14.438*SCL), (9.75*SCL),
  (3.938*SCL), (-18.562*SCL), (9.938*SCL),
  (-3.938*SCL), (-18.562*SCL), (9.938*SCL),
  (8.062*SCL), (-18.188*SCL), (10.312*SCL),
  (-8.062*SCL), (-18.188*SCL), (10.312*SCL),
  (13.876*SCL), (-16.312*SCL), (4.688*SCL),
  (-13.876*SCL), (-16.312*SCL), (4.688*SCL),
  (4.876*SCL), (-17.812*SCL), (2.25*SCL),
  (-4.876*SCL), (-17.812*SCL), (2.25*SCL),
  (3.188*SCL), (-18.188*SCL), (5.062*SCL),
  (-3.188*SCL), (-18.188*SCL), (5.062*SCL),
  (2.25*SCL), (-17.062*SCL), (-19.688*SCL),
  (-2.25*SCL), (-17.062*SCL), (-19.688*SCL),
  (-8.812*SCL), (-12.75*SCL), (-21.376*SCL),
  (8.812*SCL), (-12.75*SCL), (-21.376*SCL),
  (0.0*SCL), (-17.812*SCL), (-7.874*SCL),
  (0.0*SCL), (-17.25*SCL), (-18.562*SCL),
  (0.0*SCL), (-19.876*SCL), (-4.876*SCL),
  (4.312*SCL), (-17.062*SCL), (-7.5*SCL),
  (-4.312*SCL), (-17.062*SCL), (-7.5*SCL),
  (4.5*SCL), (-18.562*SCL), (3.75*SCL),
  (4.124*SCL), (-18.75*SCL), (5.25*SCL),
  (-4.5*SCL), (-18.562*SCL), (3.75*SCL),
  (-4.124*SCL), (-18.75*SCL), (5.25*SCL),
  (5.062*SCL), (-18.75*SCL), (9.0*SCL),
  (-4.312*SCL), (-18.75*SCL), (7.126*SCL),
  (-5.062*SCL), (-18.75*SCL), (9.0*SCL),
  (5.438*SCL), (-18.75*SCL), (2.626*SCL),
  (-5.438*SCL), (-18.75*SCL), (2.626*SCL),
  (9.0*SCL), (-17.812*SCL), (1.5*SCL),
  (-9.0*SCL), (-17.812*SCL), (1.5*SCL),
  (14.062*SCL), (-16.5*SCL), (6.938*SCL),
  (-13.5*SCL), (-16.688*SCL), (8.438*SCL),
  (12.044*SCL), (-17.396*SCL), (9.376*SCL),
  (-11.424*SCL), (-17.152*SCL), (9.376*SCL),
  (2.626*SCL), (-14.624*SCL), (11.062*SCL),
  (-2.626*SCL), (-14.624*SCL), (11.062*SCL),
  (4.688*SCL), (-14.812*SCL), (15.938*SCL),
  (-4.688*SCL), (-14.812*SCL), (15.938*SCL),
  (7.876*SCL), (-9.562*SCL), (-21.938*SCL),
  (0.0*SCL), (-4.5*SCL), (-11.062*SCL),
  (5.062*SCL), (-3.938*SCL), (-9.376*SCL),
  (-5.062*SCL), (-3.938*SCL), (-9.376*SCL),
  (-7.876*SCL), (-9.562*SCL), (-21.938*SCL),
  (7.126*SCL), (6.374*SCL), (-7.5*SCL),
  (0.0*SCL), (16.126*SCL), (-4.688*SCL),
  (0.0*SCL), (13.126*SCL), (21.562*SCL),
  (-10.874*SCL), (-5.626*SCL), (20.438*SCL),
  (10.874*SCL), (-5.626*SCL), (20.438*SCL),
  (0.0*SCL), (20.438*SCL), (13.5*SCL),
  (19.126*SCL), (8.626*SCL), (12.938*SCL),
  (18.562*SCL), (10.5*SCL), (6.374*SCL),
  (-19.126*SCL), (8.626*SCL), (12.938*SCL),
  (-18.562*SCL), (10.5*SCL), (6.374*SCL),
  (19.688*SCL), (4.874*SCL), (7.876*SCL),
  (-19.688*SCL), (4.874*SCL), (7.876*SCL),
  (14.25*SCL), (3.938*SCL), (-3.0*SCL),
  (-14.25*SCL), (3.938*SCL), (-3.0*SCL),
  (-15.376*SCL), (10.312*SCL), (-0.188*SCL),
  (11.626*SCL), (13.126*SCL), (0.562*SCL),
  (28.5*SCL), (9.376*SCL), (10.5*SCL),
  (29.626*SCL), (10.126*SCL), (12.188*SCL),
  (21.376*SCL), (5.624*SCL), (9.75*SCL),
  (-24.562*SCL), (7.5*SCL), (11.438*SCL),
  (-29.626*SCL), (10.126*SCL), (12.188*SCL),
  (-28.5*SCL), (9.376*SCL), (10.5*SCL),
  (30.376*SCL), (9.75*SCL), (6.938*SCL),
  (32.438*SCL), (10.126*SCL), (7.688*SCL),
  (-30.376*SCL), (9.75*SCL), (6.938*SCL),
  (-32.438*SCL), (10.126*SCL), (7.688*SCL),
  (29.062*SCL), (9.75*SCL), (1.876*SCL),
  (30.75*SCL), (10.312*SCL), (1.312*SCL),
  (-29.062*SCL), (9.75*SCL), (1.876*SCL),
  (-30.75*SCL), (10.312*SCL), (1.312*SCL),
  (24.938*SCL), (7.874*SCL), (-2.438*SCL),
  (-24.938*SCL), (7.874*SCL), (-2.438*SCL),
  (19.876*SCL), (3.188*SCL), (-1.688*SCL),
  (18.562*SCL), (3.0*SCL), (-3.376*SCL),
  (-18.562*SCL), (3.0*SCL), (-3.376*SCL),
  (-19.688*SCL), (6.562*SCL), (2.062*SCL),
  (25.126*SCL), (10.126*SCL), (0.0*SCL),
  (-28.5*SCL), (10.688*SCL), (2.25*SCL),
  (28.5*SCL), (10.688*SCL), (2.25*SCL),
  (29.626*SCL), (10.688*SCL), (6.0*SCL),
  (-29.626*SCL), (10.688*SCL), (6.0*SCL),
  (28.126*SCL), (10.5*SCL), (8.626*SCL),
  (-28.126*SCL), (10.5*SCL), (8.626*SCL),
  (24.938*SCL), (9.938*SCL), (7.876*SCL),
  (17.25*SCL), (4.124*SCL), (-0.562*SCL),
  (-17.25*SCL), (4.124*SCL), (-0.562*SCL),
  (20.25*SCL), (6.562*SCL), (0.376*SCL),
  (18.938*SCL), (7.874*SCL), (-3.0*SCL),
  (24.938*SCL), (11.812*SCL), (-2.062*SCL),
  (-18.938*SCL), (7.874*SCL), (-3.0*SCL),
  (-24.938*SCL), (11.812*SCL), (-2.062*SCL),
  (31.5*SCL), (12.75*SCL), (1.312*SCL),
  (-31.5*SCL), (12.75*SCL), (1.312*SCL),
  (32.812*SCL), (12.0*SCL), (7.126*SCL),
  (-32.812*SCL), (12.0*SCL), (7.126*SCL),
  (30.0*SCL), (13.126*SCL), (11.25*SCL),
  (-30.0*SCL), (13.126*SCL), (11.25*SCL),
};

const int16_t numTrisMonkey = 223;
const uint8_t trisMonkey[] =
{
  0, 1, 2,
  2, 3, 0,
  4, 5, 6,
  6, 7, 4,
  8, 2, 1,
  5, 4, 9,
  10, 11, 12,
  12, 13, 10,
  14, 15, 16,
  16, 17, 14,
  11, 18, 12,
  14, 19, 15,
  20, 12, 18,
  19, 14, 20,
  18, 21, 20,
  20, 21, 19,
  12, 20, 22,
  23, 20, 14,
  22, 24, 12,
  14, 25, 23,
  12, 24, 13,
  17, 25, 14,
  26, 1, 10,
  10, 13, 26,
  16, 5, 27,
  27, 17, 16,
  1, 26, 8,
  9, 27, 5,
  28, 3, 2,
  4, 7, 29,
  20, 3, 28,
  29, 7, 20,
  20, 30, 22,
  23, 31, 20,
  20, 28, 30,
  31, 29, 20,
  32, 33, 34,
  34, 35, 32,
  32, 36, 37,
  37, 36, 33,
  36, 3, 38,
  38, 7, 36,
  3, 20, 38,
  38, 20, 7,
  3, 36, 39,
  40, 36, 7,
  32, 39, 36,
  36, 40, 33,
  39, 32, 35,
  34, 33, 40,
  35, 0, 39,
  0, 3, 39,
  40, 7, 6,
  6, 34, 40,
  33, 32, 37,
  30, 28, 41,
  41, 42, 30,
  43, 29, 31,
  31, 44, 43,
  22, 30, 42,
  42, 45, 22,
  44, 31, 23,
  23, 46, 44,
  23, 47, 46,
  48, 41, 28,
  29, 43, 49,
  28, 2, 50,
  50, 48, 28,
  51, 4, 29,
  29, 49, 51,
  8, 50, 2,
  4, 51, 9,
  26, 13, 52,
  53, 17, 27,
  54, 52, 13,
  17, 53, 55,
  24, 54, 13,
  17, 55, 25,
  24, 22, 45,
  47, 23, 25,
  21, 18, 56,
  57, 19, 21,
  58, 56, 18,
  19, 57, 59,
  18, 11, 58,
  59, 15, 19,
  10, 58, 11,
  15, 59, 16,
  60, 61, 62,
  63, 61, 60,
  35, 34, 60,
  34, 64, 60,
  63, 60, 64,
  0, 60, 62,
  63, 64, 6,
  60, 0, 35,
  34, 6, 64,
  65, 61, 66,
  66, 61, 63,
  61, 65, 62,
  67, 68, 69,
  70, 67, 71,
  71, 72, 70,
  73, 67, 70,
  70, 74, 73,
  67, 69, 71,
  73, 68, 67,
  10, 71, 69,
  68, 73, 16,
  21, 10, 69,
  68, 16, 21,
  21, 69, 68,
  58, 10, 56,
  57, 16, 59,
  10, 21, 56,
  57, 21, 16,
  1, 75, 71,
  71, 10, 1,
  73, 76, 5,
  5, 16, 73,
  71, 75, 72,
  74, 76, 73,
  65, 1, 62,
  65, 77, 1,
  5, 78, 63,
  0, 62, 1,
  5, 63, 6,
  66, 79, 74,
  70, 72, 80,
  80, 66, 70,
  66, 74, 70,
  77, 65, 80,
  66, 63, 78,
  78, 79, 66,
  66, 80, 65,
  81, 82, 83,
  84, 85, 86,
  82, 81, 87,
  87, 88, 82,
  89, 86, 85,
  85, 90, 89,
  88, 87, 91,
  91, 92, 88,
  93, 89, 90,
  90, 94, 93,
  92, 91, 95,
  96, 93, 94,
  97, 98, 95,
  96, 99, 100,
  95, 101, 97,
  100, 102, 96,
  91, 103, 101,
  101, 95, 91,
  93, 96, 102,
  87, 104, 103,
  103, 91, 87,
  102, 105, 89,
  89, 93, 102,
  81, 106, 104,
  104, 87, 81,
  105, 107, 86,
  86, 89, 105,
  83, 108, 106,
  106, 81, 83,
  107, 100, 84,
  84, 86, 107,
  1, 77, 109,
  110, 78, 5,
  77, 98, 97,
  97, 109, 77,
  100, 99, 78,
  78, 110, 100,
  111, 109, 97,
  75, 109, 111,
  100, 110, 76,
  83, 75, 111,
  111, 108, 83,
  100, 76, 84,
  1, 109, 75,
  76, 110, 5,
  111, 97, 101,
  111, 101, 103,
  100, 105, 102,
  111, 103, 104,
  111, 104, 106,
  105, 100, 107,
  108, 111, 106,
  95, 98, 112,
  112, 113, 95,
  114, 99, 96,
  96, 115, 114,
  92, 95, 113,
  113, 116, 92,
  115, 96, 94,
  94, 117, 115,
  88, 92, 116,
  116, 118, 88,
  117, 94, 90,
  90, 119, 117,
  82, 88, 118,
  118, 120, 82,
  119, 90, 85,
  85, 121, 119,
  83, 82, 120,
  120, 72, 83,
  121, 85, 84,
  84, 74, 121,
  72, 113, 112,
  114, 115, 74,
  72, 120, 116,
  116, 113, 72,
  117, 121, 74,
  74, 115, 117,
  120, 118, 116,
  117, 119, 121,
  72, 75, 83,
  84, 76, 74,
  112, 80, 72,
  74, 79, 114,
  77, 80, 112,
  112, 98, 77,
  114, 79, 78,
  78, 99, 114,
};

const uint16_t colsMonkey[] =
{
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
  COL61,COL61,COL62,COL62,COL63,COL63, COL61,COL61,COL62,COL62,COL63,COL63,
};

// ----------------------------------------------- 
const int16_t numVertsSphere = 32;
const int16_t vertsSphere[] =
{
  (-28.98*SCL), (0.0*SCL), (-0.0*SCL),
  (-25.097422*SCL), (0.0*SCL), (14.49*SCL),
  (-12.548704*SCL), (21.735*SCL), (14.49*SCL),
  (-14.49*SCL), (25.097408*SCL), (-0.0*SCL),
  (-14.49*SCL), (0.0*SCL), (25.097422*SCL),
  (-7.245*SCL), (12.548704*SCL), (25.097422*SCL),
  (-7.245*SCL), (12.548704*SCL), (-25.097422*SCL),
  (-12.548704*SCL), (21.735*SCL), (-14.49*SCL),
  (12.548704*SCL), (21.735*SCL), (-14.49*SCL),
  (7.245*SCL), (12.548704*SCL), (-25.097422*SCL),
  (14.49*SCL), (25.097408*SCL), (-0.0*SCL),
  (12.548704*SCL), (21.735*SCL), (14.49*SCL),
  (7.245*SCL), (12.548704*SCL), (25.097422*SCL),
  (25.097408*SCL), (-0.0*SCL), (-14.49*SCL),
  (14.489986*SCL), (-0.0*SCL), (-25.097422*SCL),
  (28.979986*SCL), (-0.0*SCL), (-0.0*SCL),
  (25.097408*SCL), (-0.0*SCL), (14.49*SCL),
  (14.489986*SCL), (-0.0*SCL), (25.097422*SCL),
  (12.548704*SCL), (-21.735*SCL), (-14.49*SCL),
  (7.244986*SCL), (-12.548704*SCL), (-25.097422*SCL),
  (14.489986*SCL), (-25.097422*SCL), (-0.0*SCL),
  (12.548704*SCL), (-21.735*SCL), (14.49*SCL),
  (7.244986*SCL), (-12.548704*SCL), (25.097422*SCL),
  (-12.548718*SCL), (-21.735*SCL), (-14.49*SCL),
  (-7.245014*SCL), (-12.548704*SCL), (-25.097422*SCL),
  (-14.490014*SCL), (-25.097408*SCL), (-0.0*SCL),
  (-12.548718*SCL), (-21.735*SCL), (14.49*SCL),
  (-7.245014*SCL), (-12.548704*SCL), (25.097422*SCL),
  (-0.0*SCL), (0.0*SCL), (-28.98*SCL),
  (-14.49*SCL), (0.0*SCL), (-25.097422*SCL),
  (-25.097422*SCL), (1.4e-05*SCL), (-14.49*SCL),
  (-0.0*SCL), (-0.0*SCL), (28.98*SCL),
};

const int16_t numTrisSphere = 60;
const uint8_t trisSphere[] =
{
  0, 1, 2,
  2, 3, 0,
  1, 4, 5,
  5, 2, 1,
  6, 7, 8,
  8, 9, 6,
  7, 3, 10,
  10, 8, 7,
  3, 2, 11,
  11, 10, 3,
  2, 5, 12,
  12, 11, 2,
  9, 8, 13,
  13, 14, 9,
  8, 10, 15,
  15, 13, 8,
  10, 11, 16,
  16, 15, 10,
  11, 12, 17,
  17, 16, 11,
  14, 13, 18,
  18, 19, 14,
  13, 15, 20,
  20, 18, 13,
  15, 16, 21,
  21, 20, 15,
  16, 17, 22,
  22, 21, 16,
  19, 18, 23,
  23, 24, 19,
  18, 20, 25,
  25, 23, 18,
  20, 21, 26,
  26, 25, 20,
  21, 22, 27,
  27, 26, 21,
  28, 29, 6,
  29, 30, 7,
  7, 6, 29,
  30, 0, 3,
  3, 7, 30,
  4, 31, 5,
  28, 6, 9,
  5, 31, 12,
  28, 9, 14,
  12, 31, 17,
  28, 14, 19,
  17, 31, 22,
  28, 19, 24,
  22, 31, 27,
  28, 24, 29,
  24, 23, 30,
  30, 29, 24,
  23, 25, 0,
  0, 30, 23,
  25, 26, 1,
  1, 0, 25,
  4, 1, 26,
  26, 27, 4,
  27, 31, 4,
};

const uint16_t colsSphere[] =
{
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
  COL33,COL33,COL31,COL31,COL32,COL32,
};

// ----------------------------------------------- 

